import React, { useEffect, useState, useRef } from 'react';

declare global {
    interface Window {
        mermaid?: any;
    }
}

interface MermaidDiagramProps {
  code: string;
}

const MermaidDiagram: React.FC<MermaidDiagramProps> = ({ code }) => {
  const [svg, setSvg] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const mermaidRef = useRef<HTMLDivElement>(null);
  const diagramId = `mermaid-diagram-${Math.random().toString(36).substr(2, 9)}`;

  useEffect(() => {
    if (window.mermaid) {
      window.mermaid.initialize({ startOnLoad: false, theme: 'default' });
    }
  }, []);

  useEffect(() => {
    if (window.mermaid && code) {
      const renderMermaid = async () => {
        try {
          // mermaid.render is asynchronous and returns the SVG code
          const { svg: renderedSvg } = await window.mermaid.render(diagramId, code);
          setSvg(renderedSvg);
          setError(null);
        } catch (e) {
          console.error("Mermaid rendering error:", e);
          const errorMessage = e instanceof Error ? e.message : String(e);
          setError(`Failed to render diagram. Please check your Mermaid syntax.\nError: ${errorMessage}`);
          setSvg('');
        }
      };
      renderMermaid();
    }
  }, [code, diagramId]);

  if (error) {
    return <div className="p-4 bg-red-50 text-red-700 border border-red-200 rounded-md whitespace-pre-wrap">{error}</div>;
  }
  
  // Using dangerouslySetInnerHTML is safe here because the SVG content is generated by the trusted Mermaid library
  // on the client-side from the diagram code, not from user-provided HTML.
  return <div ref={mermaidRef} dangerouslySetInnerHTML={{ __html: svg }} className="text-center bg-white p-4 rounded-lg"/>;
};

export default MermaidDiagram;